
testPCB_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b30  08003b30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b38  08003b38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000148  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d106  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001877  00000000  00000000  0002d142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b10  00000000  00000000  0002f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022821  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cadd  00000000  00000000  00052889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6084  00000000  00000000  0005f366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001353ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000311c  00000000  00000000  00135440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003b00 	.word	0x08003b00

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003b00 	.word	0x08003b00

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) // eger kesme kaynagi timer1 den gelmis ise
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d114      	bne.n	8000520 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
	{
		sayac++;								// her kesmede sayaci arttir.
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80004fe:	6013      	str	r3, [r2, #0]
		if(sayac == step)				// eger sayac istenilen adim sayisi kadar artmis ise
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	d109      	bne.n	8000520 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
		{
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);	// PWM'i durdur.
 800050c:	2108      	movs	r1, #8
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000510:	f002 f94a 	bl	80027a8 <HAL_TIM_PWM_Stop_IT>
			sayac=0;																// bir sonraki komutta sayac sifirdan baslamali
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
			durum=0;																// step fonksiyonunun içindeki while döngüsünden çikilmasi için
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
																							// durum degiskeni sifirlandi.
		}
	}
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40000400 	.word	0x40000400
 800052c:	20000030 	.word	0x20000030
 8000530:	20000028 	.word	0x20000028
 8000534:	200000c0 	.word	0x200000c0
 8000538:	2000002c 	.word	0x2000002c

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fdd6 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f894 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fae0 	bl	8000b0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800054c:	f000 fab4 	bl	8000ab8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000550:	f000 f8f8 	bl	8000744 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000554:	f000 fa02 	bl	800095c <MX_TIM8_Init>
  MX_TIM3_Init();
 8000558:	f000 f98a 	bl	8000870 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //DC PUMP PWM TIMER
  HAL_TIM_Base_Start(&htim2);
 800055c:	483b      	ldr	r0, [pc, #236]	; (800064c <main+0x110>)
 800055e:	f001 fe13 	bl	8002188 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	4839      	ldr	r0, [pc, #228]	; (800064c <main+0x110>)
 8000566:	f001 ff41 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800056a:	2104      	movs	r1, #4
 800056c:	4837      	ldr	r0, [pc, #220]	; (800064c <main+0x110>)
 800056e:	f001 ff3d 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000572:	2108      	movs	r1, #8
 8000574:	4835      	ldr	r0, [pc, #212]	; (800064c <main+0x110>)
 8000576:	f001 ff39 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800057a:	210c      	movs	r1, #12
 800057c:	4833      	ldr	r0, [pc, #204]	; (800064c <main+0x110>)
 800057e:	f001 ff35 	bl	80023ec <HAL_TIM_PWM_Start>

  //DC_PUMP_1
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 75);
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <main+0x110>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	224b      	movs	r2, #75	; 0x4b
 8000588:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(DC_PUMP_1_EN_1_GPIO_Port, DC_PUMP_1_EN_1_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2102      	movs	r1, #2
 800058e:	4830      	ldr	r0, [pc, #192]	; (8000650 <main+0x114>)
 8000590:	f001 f902 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_PUMP_1_EN_2_GPIO_Port, DC_PUMP_1_EN_2_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2108      	movs	r1, #8
 8000598:	482e      	ldr	r0, [pc, #184]	; (8000654 <main+0x118>)
 800059a:	f001 f8fd 	bl	8001798 <HAL_GPIO_WritePin>


  //DC_PUMP_2
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 75);
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <main+0x110>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	224b      	movs	r2, #75	; 0x4b
 80005a4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(DC_PUMP_2_EN_1_GPIO_Port, DC_PUMP_2_EN_1_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2120      	movs	r1, #32
 80005aa:	4829      	ldr	r0, [pc, #164]	; (8000650 <main+0x114>)
 80005ac:	f001 f8f4 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_PUMP_2_EN_2_GPIO_Port, DC_PUMP_2_EN_2_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4826      	ldr	r0, [pc, #152]	; (8000650 <main+0x114>)
 80005b6:	f001 f8ef 	bl	8001798 <HAL_GPIO_WritePin>

  //DC_PUMP_3
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 75);
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <main+0x110>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	224b      	movs	r2, #75	; 0x4b
 80005c0:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(DC_PUMP_3_EN_1_GPIO_Port, DC_PUMP_3_EN_1_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2108      	movs	r1, #8
 80005c6:	4824      	ldr	r0, [pc, #144]	; (8000658 <main+0x11c>)
 80005c8:	f001 f8e6 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_PUMP_3_EN_2_GPIO_Port, DC_PUMP_3_EN_2_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	4821      	ldr	r0, [pc, #132]	; (8000658 <main+0x11c>)
 80005d2:	f001 f8e1 	bl	8001798 <HAL_GPIO_WritePin>

  //DC_PUMP_4
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 75);
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <main+0x110>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	224b      	movs	r2, #75	; 0x4b
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(DC_PUMP_4_EN_1_GPIO_Port, DC_PUMP_4_EN_1_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0x114>)
 80005e4:	f001 f8d8 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_PUMP_4_EN_2_GPIO_Port, DC_PUMP_4_EN_2_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0x120>)
 80005ee:	f001 f8d3 	bl	8001798 <HAL_GPIO_WritePin>


  //SERVO
  HAL_TIM_Base_Start(&htim8);
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0x124>)
 80005f4:	f001 fdc8 	bl	8002188 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	4819      	ldr	r0, [pc, #100]	; (8000660 <main+0x124>)
 80005fc:	f001 fef6 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000600:	210c      	movs	r1, #12
 8000602:	4817      	ldr	r0, [pc, #92]	; (8000660 <main+0x124>)
 8000604:	f001 fef2 	bl	80023ec <HAL_TIM_PWM_Start>


  //STEPER
  HAL_TIM_Base_Start_IT(&htim3);
 8000608:	4816      	ldr	r0, [pc, #88]	; (8000664 <main+0x128>)
 800060a:	f001 fe25 	bl	8002258 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 800060e:	2108      	movs	r1, #8
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0x128>)
 8000612:	f001 ffb3 	bl	800257c <HAL_TIM_PWM_Start_IT>
  HAL_GPIO_WritePin(STEPPER_1_EN_GPIO_Port, STEPPER_1_EN_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4812      	ldr	r0, [pc, #72]	; (8000668 <main+0x12c>)
 800061e:	f001 f8bb 	bl	8001798 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 128); // Duty cycle %50 olarak ayarlandi.
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <main+0x128>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fdd2 	bl	80011d4 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //RELAY
	  HAL_GPIO_TogglePin(RELAY_1_GPIO_Port, RELAY_1_Pin); //legalsó feletti
 8000630:	2102      	movs	r1, #2
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x118>)
 8000634:	f001 f8c9 	bl	80017ca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(RELAY_2_GPIO_Port, RELAY_2_Pin);	//legalsó
 8000638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x130>)
 800063e:	f001 f8c4 	bl	80017ca <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000642:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000646:	f000 fdc5 	bl	80011d4 <HAL_Delay>
	  HAL_GPIO_TogglePin(RELAY_1_GPIO_Port, RELAY_1_Pin); //legalsó feletti
 800064a:	e7f1      	b.n	8000630 <main+0xf4>
 800064c:	20000108 	.word	0x20000108
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40021000 	.word	0x40021000
 8000658:	40020800 	.word	0x40020800
 800065c:	40021400 	.word	0x40021400
 8000660:	20000034 	.word	0x20000034
 8000664:	200000c0 	.word	0x200000c0
 8000668:	40020400 	.word	0x40020400
 800066c:	40021800 	.word	0x40021800

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fa36 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xd0>)
 80006ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e4:	23a8      	movs	r3, #168	; 0xa8
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ec:	2307      	movs	r3, #7
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f883 	bl	8001800 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 fb16 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2105      	movs	r1, #5
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fae4 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 faff 	bl	8000d30 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	; 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000774:	4b3d      	ldr	r3, [pc, #244]	; (800086c <MX_TIM2_Init+0x128>)
 8000776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 800077c:	4b3b      	ldr	r3, [pc, #236]	; (800086c <MX_TIM2_Init+0x128>)
 800077e:	f244 129f 	movw	r2, #16799	; 0x419f
 8000782:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_TIM2_Init+0x128>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <MX_TIM2_Init+0x128>)
 800078c:	2264      	movs	r2, #100	; 0x64
 800078e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_TIM2_Init+0x128>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <MX_TIM2_Init+0x128>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079c:	4833      	ldr	r0, [pc, #204]	; (800086c <MX_TIM2_Init+0x128>)
 800079e:	f001 fca3 	bl	80020e8 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007a8:	f000 fac2 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b6:	4619      	mov	r1, r3
 80007b8:	482c      	ldr	r0, [pc, #176]	; (800086c <MX_TIM2_Init+0x128>)
 80007ba:	f002 fa7d 	bl	8002cb8 <HAL_TIM_ConfigClockSource>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007c4:	f000 fab4 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <MX_TIM2_Init+0x128>)
 80007ca:	f001 fdb5 	bl	8002338 <HAL_TIM_PWM_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007d4:	f000 faac 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	4821      	ldr	r0, [pc, #132]	; (800086c <MX_TIM2_Init+0x128>)
 80007e8:	f002 fe66 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007f2:	f000 fa9d 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f6:	2360      	movs	r3, #96	; 0x60
 80007f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4817      	ldr	r0, [pc, #92]	; (800086c <MX_TIM2_Init+0x128>)
 800080e:	f002 f991 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000818:	f000 fa8a 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2204      	movs	r2, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_TIM2_Init+0x128>)
 8000824:	f002 f986 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800082e:	f000 fa7f 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2208      	movs	r2, #8
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_TIM2_Init+0x128>)
 800083a:	f002 f97b 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000844:	f000 fa74 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	220c      	movs	r2, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM2_Init+0x128>)
 8000850:	f002 f970 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800085a:	f000 fa69 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM2_Init+0x128>)
 8000860:	f000 fae6 	bl	8000e30 <HAL_TIM_MspPostInit>

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000108 	.word	0x20000108

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <MX_TIM3_Init+0xe8>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 325;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a8:	f240 1245 	movw	r2, #325	; 0x145
 80008ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c8:	f001 fc0e 	bl	80020e8 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008d2:	f000 fa2d 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008e4:	f002 f9e8 	bl	8002cb8 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ee:	f000 fa1f 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008f4:	f001 fd20 	bl	8002338 <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008fe:	f000 fa17 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000912:	f002 fdd1 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800091c:	f000 fa08 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 128;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2208      	movs	r2, #8
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000938:	f002 f8fc 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000942:	f000 f9f5 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000948:	f000 fa72 	bl	8000e30 <HAL_TIM_MspPostInit>

}
 800094c:	bf00      	nop
 800094e:	3738      	adds	r7, #56	; 0x38
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000c0 	.word	0x200000c0
 8000958:	40000400 	.word	0x40000400

0800095c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	; 0x58
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2220      	movs	r2, #32
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f003 f8ab 	bl	8003af0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800099a:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <MX_TIM8_Init+0x154>)
 800099c:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <MX_TIM8_Init+0x158>)
 800099e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 51;
 80009a0:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009a2:	2233      	movs	r2, #51	; 0x33
 80009a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64614;
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009ae:	f64f 4266 	movw	r2, #64614	; 0xfc66
 80009b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009c6:	483a      	ldr	r0, [pc, #232]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009c8:	f001 fb8e 	bl	80020e8 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80009d2:	f000 f9ad 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e0:	4619      	mov	r1, r3
 80009e2:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009e4:	f002 f968 	bl	8002cb8 <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80009ee:	f000 f99f 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009f2:	482f      	ldr	r0, [pc, #188]	; (8000ab0 <MX_TIM8_Init+0x154>)
 80009f4:	f001 fca0 	bl	8002338 <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80009fe:	f000 f997 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <MX_TIM8_Init+0x154>)
 8000a12:	f002 fd51 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a1c:	f000 f988 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32307;
 8000a24:	f647 6333 	movw	r3, #32307	; 0x7e33
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_TIM8_Init+0x154>)
 8000a48:	f002 f874 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000a52:	f000 f96d 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <MX_TIM8_Init+0x154>)
 8000a60:	f002 f868 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000a6a:	f000 f961 	bl	8000d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM8_Init+0x154>)
 8000a92:	f002 fd8d 	bl	80035b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000a9c:	f000 f948 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM8_Init+0x154>)
 8000aa2:	f000 f9c5 	bl	8000e30 <HAL_TIM_MspPostInit>

}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	; 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000034 	.word	0x20000034
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART3_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000af0:	f002 fdc4 	bl	800367c <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f919 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000007c 	.word	0x2000007c
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	4b7b      	ldr	r3, [pc, #492]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a7a      	ldr	r2, [pc, #488]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	4b74      	ldr	r3, [pc, #464]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a73      	ldr	r2, [pc, #460]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a6c      	ldr	r2, [pc, #432]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b6a      	ldr	r3, [pc, #424]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	4b66      	ldr	r3, [pc, #408]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a65      	ldr	r2, [pc, #404]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b63      	ldr	r3, [pc, #396]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b5f      	ldr	r3, [pc, #380]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a5e      	ldr	r2, [pc, #376]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b5c      	ldr	r3, [pc, #368]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b58      	ldr	r3, [pc, #352]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a57      	ldr	r2, [pc, #348]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b55      	ldr	r3, [pc, #340]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a50      	ldr	r2, [pc, #320]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a49      	ldr	r2, [pc, #292]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <MX_GPIO_Init+0x208>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DC_PUMP_1_EN_2_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210a      	movs	r1, #10
 8000c06:	4844      	ldr	r0, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x20c>)
 8000c08:	f000 fdc6 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_PUMP_4_EN_2_GPIO_Port, DC_PUMP_4_EN_2_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4842      	ldr	r0, [pc, #264]	; (8000d1c <MX_GPIO_Init+0x210>)
 8000c12:	f000 fdc1 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_PUMP_3_EN_2_Pin|DC_PUMP_3_EN_1_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	210c      	movs	r1, #12
 8000c1a:	4841      	ldr	r0, [pc, #260]	; (8000d20 <MX_GPIO_Init+0x214>)
 8000c1c:	f000 fdbc 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|STEPPER_1_DIR_Pin|STEPPER_1_EN_Pin|LD3_Pin
 8000c20:	2200      	movs	r2, #0
 8000c22:	f245 0185 	movw	r1, #20613	; 0x5085
 8000c26:	483f      	ldr	r0, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x218>)
 8000c28:	f000 fdb6 	bl	8001798 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DC_PUMP_1_EN_1_Pin|DC_PUMP_4_EN_1_Pin|DC_PUMP_2_EN_2_Pin|DC_PUMP_2_EN_1_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2136      	movs	r1, #54	; 0x36
 8000c30:	483d      	ldr	r0, [pc, #244]	; (8000d28 <MX_GPIO_Init+0x21c>)
 8000c32:	f000 fdb1 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3c:	483b      	ldr	r0, [pc, #236]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000c3e:	f000 fdab 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DC_PUMP_1_EN_2_Pin RELAY_1_Pin */
  GPIO_InitStruct.Pin = DC_PUMP_1_EN_2_Pin|RELAY_1_Pin;
 8000c42:	230a      	movs	r3, #10
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	482f      	ldr	r0, [pc, #188]	; (8000d18 <MX_GPIO_Init+0x20c>)
 8000c5a:	f000 fbf1 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	482a      	ldr	r0, [pc, #168]	; (8000d20 <MX_GPIO_Init+0x214>)
 8000c76:	f000 fbe3 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_PUMP_4_EN_2_Pin */
  GPIO_InitStruct.Pin = DC_PUMP_4_EN_2_Pin;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DC_PUMP_4_EN_2_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4822      	ldr	r0, [pc, #136]	; (8000d1c <MX_GPIO_Init+0x210>)
 8000c92:	f000 fbd5 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_PUMP_3_EN_2_Pin DC_PUMP_3_EN_1_Pin */
  GPIO_InitStruct.Pin = DC_PUMP_3_EN_2_Pin|DC_PUMP_3_EN_1_Pin;
 8000c96:	230c      	movs	r3, #12
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	481c      	ldr	r0, [pc, #112]	; (8000d20 <MX_GPIO_Init+0x214>)
 8000cae:	f000 fbc7 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin STEPPER_1_DIR_Pin STEPPER_1_EN_Pin LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|STEPPER_1_DIR_Pin|STEPPER_1_EN_Pin|LD3_Pin
 8000cb2:	f245 0385 	movw	r3, #20613	; 0x5085
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <MX_GPIO_Init+0x218>)
 8000ccc:	f000 fbb8 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_PUMP_1_EN_1_Pin DC_PUMP_4_EN_1_Pin DC_PUMP_2_EN_2_Pin DC_PUMP_2_EN_1_Pin */
  GPIO_InitStruct.Pin = DC_PUMP_1_EN_1_Pin|DC_PUMP_4_EN_1_Pin|DC_PUMP_2_EN_2_Pin|DC_PUMP_2_EN_1_Pin;
 8000cd0:	2336      	movs	r3, #54	; 0x36
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4810      	ldr	r0, [pc, #64]	; (8000d28 <MX_GPIO_Init+0x21c>)
 8000ce8:	f000 fbaa 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_2_Pin */
  GPIO_InitStruct.Pin = RELAY_2_Pin;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RELAY_2_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000d06:	f000 fb9b 	bl	8001440 <HAL_GPIO_Init>

}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	; 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40021400 	.word	0x40021400
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	40021800 	.word	0x40021800

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d9c:	d10e      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dba:	e02e      	b.n	8000e1a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_TIM_Base_MspInit+0x9c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d116      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201d      	movs	r0, #29
 8000de8:	f000 faf3 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dec:	201d      	movs	r0, #29
 8000dee:	f000 fb0c 	bl	800140a <HAL_NVIC_EnableIRQ>
}
 8000df2:	e012      	b.n	8000e1a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_TIM_Base_MspInit+0xa0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_TIM_Base_MspInit+0x98>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e50:	d13c      	bne.n	8000ecc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a43      	ldr	r2, [pc, #268]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a3c      	ldr	r2, [pc, #240]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DC_PUMP_3_PWM_Pin|DC_PUMP_1_PWM_Pin|DC_PUMP_4_PWM_Pin;
 8000e8a:	232c      	movs	r3, #44	; 0x2c
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4831      	ldr	r0, [pc, #196]	; (8000f6c <HAL_TIM_MspPostInit+0x13c>)
 8000ea6:	f000 facb 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_PUMP_2_PWM_Pin;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DC_PUMP_2_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482a      	ldr	r0, [pc, #168]	; (8000f70 <HAL_TIM_MspPostInit+0x140>)
 8000ec6:	f000 fabb 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000eca:	e048      	b.n	8000f5e <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <HAL_TIM_MspPostInit+0x144>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d11f      	bne.n	8000f16 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEPPER_1_STEP_Pin;
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEPPER_1_STEP_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481a      	ldr	r0, [pc, #104]	; (8000f78 <HAL_TIM_MspPostInit+0x148>)
 8000f10:	f000 fa96 	bl	8001440 <HAL_GPIO_Init>
}
 8000f14:	e023      	b.n	8000f5e <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM8)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_TIM_MspPostInit+0x14c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d11e      	bne.n	8000f5e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_MspPostInit+0x138>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_2_PWM_Pin|SERVO_1_PWM_Pin;
 8000f3c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <HAL_TIM_MspPostInit+0x148>)
 8000f5a:	f000 fa71 	bl	8001440 <HAL_GPIO_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	; 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40000400 	.word	0x40000400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_UART_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12c      	bne.n	8000ffc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fec:	2307      	movs	r3, #7
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_UART_MspInit+0x8c>)
 8000ff8:	f000 fa22 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40004800 	.word	0x40004800
 8001008:	40023800 	.word	0x40023800
 800100c:	40020c00 	.word	0x40020c00

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f89a 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM3_IRQHandler+0x10>)
 800106a:	f001 fc5b 	bl	8002924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000c0 	.word	0x200000c0

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c6:	f7ff ffd7 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f002 fced 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fa35 	bl	800053c <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010e0:	08003b40 	.word	0x08003b40
  ldr r2, =_sbss
 80010e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e8:	20000154 	.word	0x20000154

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f94f 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fe0a 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f967 	bl	8001426 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f92f 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000150 	.word	0x20000150

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000150 	.word	0x20000150

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e177      	b.n	800174c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	f040 8166 	bne.w	8001746 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d005      	beq.n	8001492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	2b02      	cmp	r3, #2
 8001490:	d130      	bne.n	80014f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d017      	beq.n	8001530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80c0 	beq.w	8001746 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b66      	ldr	r3, [pc, #408]	; (8001764 <HAL_GPIO_Init+0x324>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_GPIO_Init+0x324>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_GPIO_Init+0x324>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e2:	4a61      	ldr	r2, [pc, #388]	; (8001768 <HAL_GPIO_Init+0x328>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_GPIO_Init+0x32c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d037      	beq.n	800167e <HAL_GPIO_Init+0x23e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a57      	ldr	r2, [pc, #348]	; (8001770 <HAL_GPIO_Init+0x330>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d031      	beq.n	800167a <HAL_GPIO_Init+0x23a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x334>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02b      	beq.n	8001676 <HAL_GPIO_Init+0x236>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x338>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d025      	beq.n	8001672 <HAL_GPIO_Init+0x232>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <HAL_GPIO_Init+0x33c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01f      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_GPIO_Init+0x340>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d019      	beq.n	800166a <HAL_GPIO_Init+0x22a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x344>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x226>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a51      	ldr	r2, [pc, #324]	; (8001788 <HAL_GPIO_Init+0x348>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x222>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a50      	ldr	r2, [pc, #320]	; (800178c <HAL_GPIO_Init+0x34c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x21e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4f      	ldr	r2, [pc, #316]	; (8001790 <HAL_GPIO_Init+0x350>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x21a>
 8001656:	2309      	movs	r3, #9
 8001658:	e012      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800165a:	230a      	movs	r3, #10
 800165c:	e010      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800165e:	2308      	movs	r3, #8
 8001660:	e00e      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001662:	2307      	movs	r3, #7
 8001664:	e00c      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001666:	2306      	movs	r3, #6
 8001668:	e00a      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800166a:	2305      	movs	r3, #5
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800166e:	2304      	movs	r3, #4
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800167e:	2300      	movs	r3, #0
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f002 0203 	and.w	r2, r2, #3
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001690:	4935      	ldr	r1, [pc, #212]	; (8001768 <HAL_GPIO_Init+0x328>)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c2:	4a34      	ldr	r2, [pc, #208]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_GPIO_Init+0x354>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_GPIO_Init+0x354>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <HAL_GPIO_Init+0x354>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	f67f ae84 	bls.w	800145c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40013800 	.word	0x40013800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40021400 	.word	0x40021400
 8001784:	40021800 	.word	0x40021800
 8001788:	40021c00 	.word	0x40021c00
 800178c:	40022000 	.word	0x40022000
 8001790:	40022400 	.word	0x40022400
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	041a      	lsls	r2, r3, #16
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	400b      	ands	r3, r1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	619a      	str	r2, [r3, #24]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e264      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d075      	beq.n	800190a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800181e:	4ba3      	ldr	r3, [pc, #652]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d00c      	beq.n	8001844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182a:	4ba0      	ldr	r3, [pc, #640]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d112      	bne.n	800185c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001836:	4b9d      	ldr	r3, [pc, #628]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001842:	d10b      	bne.n	800185c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	4b99      	ldr	r3, [pc, #612]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d05b      	beq.n	8001908 <HAL_RCC_OscConfig+0x108>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d157      	bne.n	8001908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e23f      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x74>
 8001866:	4b91      	ldr	r3, [pc, #580]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a90      	ldr	r2, [pc, #576]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xb0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x98>
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a87      	ldr	r2, [pc, #540]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xb0>
 8001898:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a83      	ldr	r2, [pc, #524]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a80      	ldr	r2, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc80 	bl	80011bc <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc7c 	bl	80011bc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e204      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xc0>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc6c 	bl	80011bc <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fc68 	bl	80011bc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1f0      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0xe8>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001922:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192e:	4b5f      	ldr	r3, [pc, #380]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x152>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1c4      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4952      	ldr	r1, [pc, #328]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e03a      	b.n	80019de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <HAL_RCC_OscConfig+0x2b0>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff fc21 	bl	80011bc <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fc1d 	bl	80011bc <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1a5      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4940      	ldr	r1, [pc, #256]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x2b0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fc00 	bl	80011bc <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff fbfc 	bl	80011bc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e184      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d030      	beq.n	8001a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_RCC_OscConfig+0x2b4>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fbe0 	bl	80011bc <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fbdc 	bl	80011bc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e164      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x200>
 8001a1e:	e015      	b.n	8001a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x2b4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fbc9 	bl	80011bc <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fbc5 	bl	80011bc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e14d      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a0 	beq.w	8001b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x2b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d121      	bne.n	8001ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_RCC_OscConfig+0x2b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_RCC_OscConfig+0x2b8>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb8b 	bl	80011bc <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	e011      	b.n	8001ace <HAL_RCC_OscConfig+0x2ce>
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	42470000 	.word	0x42470000
 8001ab4:	42470e80 	.word	0x42470e80
 8001ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abc:	f7ff fb7e 	bl	80011bc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e106      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b85      	ldr	r3, [pc, #532]	; (8001ce4 <HAL_RCC_OscConfig+0x4e4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
 8001ae2:	4b81      	ldr	r3, [pc, #516]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a80      	ldr	r2, [pc, #512]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	e01c      	b.n	8001b2a <HAL_RCC_OscConfig+0x32a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x312>
 8001af8:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a7a      	ldr	r2, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
 8001b04:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x32a>
 8001b12:	4b75      	ldr	r3, [pc, #468]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a74      	ldr	r2, [pc, #464]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a71      	ldr	r2, [pc, #452]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff fb43 	bl	80011bc <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fb3f 	bl	80011bc <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0c5      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCC_OscConfig+0x33a>
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fb2d 	bl	80011bc <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fb29 	bl	80011bc <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0af      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ee      	bne.n	8001b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 809b 	beq.w	8001cda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d05c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d141      	bne.n	8001c3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4ec>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fafd 	bl	80011bc <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff faf9 	bl	80011bc <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e081      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	019b      	lsls	r3, r3, #6
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	061b      	lsls	r3, r3, #24
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x4ec>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fad2 	bl	80011bc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff face 	bl	80011bc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e056      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x41c>
 8001c3a:	e04e      	b.n	8001cda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x4ec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fabb 	bl	80011bc <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fab7 	bl	80011bc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e03f      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x44a>
 8001c68:	e037      	b.n	8001cda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e032      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_RCC_OscConfig+0x4e8>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d028      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d121      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d11a      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d111      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	085b      	lsrs	r3, r3, #1
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	42470060 	.word	0x42470060

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0cc      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90c      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d44:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	494d      	ldr	r1, [pc, #308]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d044      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e067      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4934      	ldr	r1, [pc, #208]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7ff f9ec 	bl	80011bc <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7ff f9e8 	bl	80011bc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e04f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d20c      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e032      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4916      	ldr	r1, [pc, #88]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	490e      	ldr	r1, [pc, #56]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e76:	f000 f821 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	490a      	ldr	r1, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	5ccb      	ldrb	r3, [r1, r3]
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f94c 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08003b18 	.word	0x08003b18
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d00d      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x40>
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	f200 80bd 	bhi.w	8002060 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eee:	e0b7      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ef2:	60bb      	str	r3, [r7, #8]
       break;
 8001ef4:	e0b7      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ef6:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ef8:	60bb      	str	r3, [r7, #8]
      break;
 8001efa:	e0b4      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f06:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04d      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	099b      	lsrs	r3, r3, #6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	ea02 0800 	and.w	r8, r2, r0
 8001f2a:	ea03 0901 	and.w	r9, r3, r1
 8001f2e:	4640      	mov	r0, r8
 8001f30:	4649      	mov	r1, r9
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	014b      	lsls	r3, r1, #5
 8001f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f40:	0142      	lsls	r2, r0, #5
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	ebb0 0008 	subs.w	r0, r0, r8
 8001f4a:	eb61 0109 	sbc.w	r1, r1, r9
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f5c:	0182      	lsls	r2, r0, #6
 8001f5e:	1a12      	subs	r2, r2, r0
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	00d9      	lsls	r1, r3, #3
 8001f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f72:	00d0      	lsls	r0, r2, #3
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	eb12 0208 	adds.w	r2, r2, r8
 8001f7c:	eb43 0309 	adc.w	r3, r3, r9
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0259      	lsls	r1, r3, #9
 8001f8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f8e:	0250      	lsls	r0, r2, #9
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	f7fe f924 	bl	80001ec <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e04a      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	ea02 0400 	and.w	r4, r2, r0
 8001fc6:	ea03 0501 	and.w	r5, r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	014b      	lsls	r3, r1, #5
 8001fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fdc:	0142      	lsls	r2, r0, #5
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	1b00      	subs	r0, r0, r4
 8001fe4:	eb61 0105 	sbc.w	r1, r1, r5
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	018b      	lsls	r3, r1, #6
 8001ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff6:	0182      	lsls	r2, r0, #6
 8001ff8:	1a12      	subs	r2, r2, r0
 8001ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffe:	f04f 0000 	mov.w	r0, #0
 8002002:	f04f 0100 	mov.w	r1, #0
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800200c:	00d0      	lsls	r0, r2, #3
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	1912      	adds	r2, r2, r4
 8002014:	eb45 0303 	adc.w	r3, r5, r3
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0299      	lsls	r1, r3, #10
 8002022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002026:	0290      	lsls	r0, r2, #10
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	f7fe f8d8 	bl	80001ec <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	60bb      	str	r3, [r7, #8]
      break;
 800205e:	e002      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002062:	60bb      	str	r3, [r7, #8]
      break;
 8002064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002066:	68bb      	ldr	r3, [r7, #8]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	00f42400 	.word	0x00f42400
 800207c:	007a1200 	.word	0x007a1200

08002080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000000 	.word	0x20000000

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08003b28 	.word	0x08003b28

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08003b28 	.word	0x08003b28

080020e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e041      	b.n	800217e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fe3c 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 feb6 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e046      	b.n	800222e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_TIM_Base_Start+0xb4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d01d      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_TIM_Base_Start+0xb8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_TIM_Base_Start+0xbc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_TIM_Base_Start+0xc0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_TIM_Base_Start+0xc4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_TIM_Base_Start+0xc8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_TIM_Base_Start+0x70>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_TIM_Base_Start+0xcc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d111      	bne.n	800221c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b06      	cmp	r3, #6
 8002208:	d010      	beq.n	800222c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	e007      	b.n	800222c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40010000 	.word	0x40010000
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40010400 	.word	0x40010400
 8002250:	40014000 	.word	0x40014000
 8002254:	40001800 	.word	0x40001800

08002258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d001      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e04e      	b.n	800230e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a23      	ldr	r2, [pc, #140]	; (800231c <HAL_TIM_Base_Start_IT+0xc4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d022      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d01d      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_TIM_Base_Start_IT+0xc8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_TIM_Base_Start_IT+0xcc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_TIM_Base_Start_IT+0xd0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_TIM_Base_Start_IT+0xd4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_TIM_Base_Start_IT+0xd8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x80>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIM_Base_Start_IT+0xdc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d010      	beq.n	800230c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e007      	b.n	800230c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40010400 	.word	0x40010400
 8002330:	40014000 	.word	0x40014000
 8002334:	40001800 	.word	0x40001800

08002338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f839 	bl	80023d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 fd8e 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_TIM_PWM_Start+0x24>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e022      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d109      	bne.n	800242a <HAL_TIM_PWM_Start+0x3e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e015      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d109      	bne.n	8002444 <HAL_TIM_PWM_Start+0x58>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e008      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07c      	b.n	8002558 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0x82>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800246c:	e013      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d104      	bne.n	800247e <HAL_TIM_PWM_Start+0x92>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	e00b      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d104      	bne.n	800248e <HAL_TIM_PWM_Start+0xa2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248c:	e003      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 ffe4 	bl	800346c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_TIM_PWM_Start+0x174>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_PWM_Start+0xcc>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <HAL_TIM_PWM_Start+0x178>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_PWM_Start+0xd0>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_TIM_PWM_Start+0xd2>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_TIM_PWM_Start+0x174>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d01d      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_TIM_PWM_Start+0x17c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_TIM_PWM_Start+0x180>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_TIM_PWM_Start+0x184>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_TIM_PWM_Start+0x178>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_TIM_PWM_Start+0x188>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIM_PWM_Start+0x18c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d111      	bne.n	8002546 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d010      	beq.n	8002556 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	e007      	b.n	8002556 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40010000 	.word	0x40010000
 8002564:	40010400 	.word	0x40010400
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40014000 	.word	0x40014000
 8002578:	40001800 	.word	0x40001800

0800257c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_TIM_PWM_Start_IT+0x28>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e022      	b.n	80025ea <HAL_TIM_PWM_Start_IT+0x6e>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d109      	bne.n	80025be <HAL_TIM_PWM_Start_IT+0x42>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	e015      	b.n	80025ea <HAL_TIM_PWM_Start_IT+0x6e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d109      	bne.n	80025d8 <HAL_TIM_PWM_Start_IT+0x5c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e008      	b.n	80025ea <HAL_TIM_PWM_Start_IT+0x6e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0c7      	b.n	8002782 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <HAL_TIM_PWM_Start_IT+0x86>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002600:	e013      	b.n	800262a <HAL_TIM_PWM_Start_IT+0xae>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d104      	bne.n	8002612 <HAL_TIM_PWM_Start_IT+0x96>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002610:	e00b      	b.n	800262a <HAL_TIM_PWM_Start_IT+0xae>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d104      	bne.n	8002622 <HAL_TIM_PWM_Start_IT+0xa6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002620:	e003      	b.n	800262a <HAL_TIM_PWM_Start_IT+0xae>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d841      	bhi.n	80026b4 <HAL_TIM_PWM_Start_IT+0x138>
 8002630:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002636:	bf00      	nop
 8002638:	0800266d 	.word	0x0800266d
 800263c:	080026b5 	.word	0x080026b5
 8002640:	080026b5 	.word	0x080026b5
 8002644:	080026b5 	.word	0x080026b5
 8002648:	0800267f 	.word	0x0800267f
 800264c:	080026b5 	.word	0x080026b5
 8002650:	080026b5 	.word	0x080026b5
 8002654:	080026b5 	.word	0x080026b5
 8002658:	08002691 	.word	0x08002691
 800265c:	080026b5 	.word	0x080026b5
 8002660:	080026b5 	.word	0x080026b5
 8002664:	080026b5 	.word	0x080026b5
 8002668:	080026a3 	.word	0x080026a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	60da      	str	r2, [r3, #12]
      break;
 800267c:	e01d      	b.n	80026ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0204 	orr.w	r2, r2, #4
 800268c:	60da      	str	r2, [r3, #12]
      break;
 800268e:	e014      	b.n	80026ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0208 	orr.w	r2, r2, #8
 800269e:	60da      	str	r2, [r3, #12]
      break;
 80026a0:	e00b      	b.n	80026ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0210 	orr.w	r2, r2, #16
 80026b0:	60da      	str	r2, [r3, #12]
      break;
 80026b2:	e002      	b.n	80026ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d15f      	bne.n	8002780 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	6839      	ldr	r1, [r7, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fecf 	bl	800346c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2e      	ldr	r2, [pc, #184]	; (800278c <HAL_TIM_PWM_Start_IT+0x210>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_PWM_Start_IT+0x166>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <HAL_TIM_PWM_Start_IT+0x214>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_PWM_Start_IT+0x16a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_PWM_Start_IT+0x16c>
 80026e6:	2300      	movs	r3, #0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_TIM_PWM_Start_IT+0x210>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270e:	d01d      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_TIM_PWM_Start_IT+0x218>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1c      	ldr	r2, [pc, #112]	; (800279c <HAL_TIM_PWM_Start_IT+0x220>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_TIM_PWM_Start_IT+0x214>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_TIM_PWM_Start_IT+0x224>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_TIM_PWM_Start_IT+0x228>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d010      	beq.n	8002780 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	e007      	b.n	8002780 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40010000 	.word	0x40010000
 8002790:	40010400 	.word	0x40010400
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40014000 	.word	0x40014000
 80027a4:	40001800 	.word	0x40001800

080027a8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d841      	bhi.n	8002840 <HAL_TIM_PWM_Stop_IT+0x98>
 80027bc:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	08002841 	.word	0x08002841
 80027cc:	08002841 	.word	0x08002841
 80027d0:	08002841 	.word	0x08002841
 80027d4:	0800280b 	.word	0x0800280b
 80027d8:	08002841 	.word	0x08002841
 80027dc:	08002841 	.word	0x08002841
 80027e0:	08002841 	.word	0x08002841
 80027e4:	0800281d 	.word	0x0800281d
 80027e8:	08002841 	.word	0x08002841
 80027ec:	08002841 	.word	0x08002841
 80027f0:	08002841 	.word	0x08002841
 80027f4:	0800282f 	.word	0x0800282f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0202 	bic.w	r2, r2, #2
 8002806:	60da      	str	r2, [r3, #12]
      break;
 8002808:	e01d      	b.n	8002846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0204 	bic.w	r2, r2, #4
 8002818:	60da      	str	r2, [r3, #12]
      break;
 800281a:	e014      	b.n	8002846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0208 	bic.w	r2, r2, #8
 800282a:	60da      	str	r2, [r3, #12]
      break;
 800282c:	e00b      	b.n	8002846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0210 	bic.w	r2, r2, #16
 800283c:	60da      	str	r2, [r3, #12]
      break;
 800283e:	e002      	b.n	8002846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	bf00      	nop
  }

  if (status == HAL_OK)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d161      	bne.n	8002910 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fe09 	bl	800346c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2f      	ldr	r2, [pc, #188]	; (800291c <HAL_TIM_PWM_Stop_IT+0x174>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_TIM_PWM_Stop_IT+0xc6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <HAL_TIM_PWM_Stop_IT+0x178>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_TIM_PWM_Stop_IT+0xca>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <HAL_TIM_PWM_Stop_IT+0x100>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	f240 4344 	movw	r3, #1092	; 0x444
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d107      	bne.n	80028a8 <HAL_TIM_PWM_Stop_IT+0x100>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10f      	bne.n	80028d8 <HAL_TIM_PWM_Stop_IT+0x130>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	f240 4344 	movw	r3, #1092	; 0x444
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_PWM_Stop_IT+0x130>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <HAL_TIM_PWM_Stop_IT+0x140>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e6:	e013      	b.n	8002910 <HAL_TIM_PWM_Stop_IT+0x168>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d104      	bne.n	80028f8 <HAL_TIM_PWM_Stop_IT+0x150>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f6:	e00b      	b.n	8002910 <HAL_TIM_PWM_Stop_IT+0x168>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d104      	bne.n	8002908 <HAL_TIM_PWM_Stop_IT+0x160>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002906:	e003      	b.n	8002910 <HAL_TIM_PWM_Stop_IT+0x168>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d122      	bne.n	8002980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d11b      	bne.n	8002980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0202 	mvn.w	r2, #2
 8002950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa81 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa73 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fd fdb5 	bl	80004e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d122      	bne.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d11b      	bne.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0204 	mvn.w	r2, #4
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa57 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa49 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fd fd8b 	bl	80004e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d122      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d11b      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0208 	mvn.w	r2, #8
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa2d 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa1f 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fd fd61 	bl	80004e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2208      	movs	r2, #8
 8002a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa03 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9f5 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fd fd37 	bl	80004e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0201 	mvn.w	r2, #1
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9cf 	bl	8002e46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fdca 	bl	8003668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9c1 	bl	8002e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0220 	mvn.w	r2, #32
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fd94 	bl	8003654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0ae      	b.n	8002cb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	f200 809f 	bhi.w	8002ca0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b62:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002ca1 	.word	0x08002ca1
 8002b70:	08002ca1 	.word	0x08002ca1
 8002b74:	08002ca1 	.word	0x08002ca1
 8002b78:	08002bdd 	.word	0x08002bdd
 8002b7c:	08002ca1 	.word	0x08002ca1
 8002b80:	08002ca1 	.word	0x08002ca1
 8002b84:	08002ca1 	.word	0x08002ca1
 8002b88:	08002c1f 	.word	0x08002c1f
 8002b8c:	08002ca1 	.word	0x08002ca1
 8002b90:	08002ca1 	.word	0x08002ca1
 8002b94:	08002ca1 	.word	0x08002ca1
 8002b98:	08002c5f 	.word	0x08002c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fa18 	bl	8002fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0204 	bic.w	r2, r2, #4
 8002bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6999      	ldr	r1, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	619a      	str	r2, [r3, #24]
      break;
 8002bda:	e064      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fa68 	bl	80030b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6999      	ldr	r1, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	619a      	str	r2, [r3, #24]
      break;
 8002c1c:	e043      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fabd 	bl	80031a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0208 	orr.w	r2, r2, #8
 8002c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0204 	bic.w	r2, r2, #4
 8002c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69d9      	ldr	r1, [r3, #28]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	61da      	str	r2, [r3, #28]
      break;
 8002c5c:	e023      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fb11 	bl	800328c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	61da      	str	r2, [r3, #28]
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e0b4      	b.n	8002e3e <HAL_TIM_ConfigClockSource+0x186>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0c:	d03e      	beq.n	8002d8c <HAL_TIM_ConfigClockSource+0xd4>
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	f200 8087 	bhi.w	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1a:	f000 8086 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x172>
 8002d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d22:	d87f      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b70      	cmp	r3, #112	; 0x70
 8002d26:	d01a      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0xa6>
 8002d28:	2b70      	cmp	r3, #112	; 0x70
 8002d2a:	d87b      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b60      	cmp	r3, #96	; 0x60
 8002d2e:	d050      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d30:	2b60      	cmp	r3, #96	; 0x60
 8002d32:	d877      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b50      	cmp	r3, #80	; 0x50
 8002d36:	d03c      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d38:	2b50      	cmp	r3, #80	; 0x50
 8002d3a:	d873      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d058      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d86f      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b30      	cmp	r3, #48	; 0x30
 8002d46:	d064      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x15a>
 8002d48:	2b30      	cmp	r3, #48	; 0x30
 8002d4a:	d86b      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d060      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x15a>
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d867      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05c      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x15a>
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d05a      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x15a>
 8002d5c:	e062      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f000 fb5d 	bl	800342c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	609a      	str	r2, [r3, #8]
      break;
 8002d8a:	e04f      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f000 fb46 	bl	800342c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dae:	609a      	str	r2, [r3, #8]
      break;
 8002db0:	e03c      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 faba 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2150      	movs	r1, #80	; 0x50
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fb13 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e02c      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 fad9 	bl	8003396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2160      	movs	r1, #96	; 0x60
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb03 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002df0:	e01c      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 fa9a 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2140      	movs	r1, #64	; 0x40
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 faf3 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e00c      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f000 faea 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002e22:	e003      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e000      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a40      	ldr	r2, [pc, #256]	; (8002fac <TIM_Base_SetConfig+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <TIM_Base_SetConfig+0x118>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <TIM_Base_SetConfig+0x120>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <TIM_Base_SetConfig+0x124>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <TIM_Base_SetConfig+0x114>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d027      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <TIM_Base_SetConfig+0x118>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d023      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <TIM_Base_SetConfig+0x120>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01b      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a29      	ldr	r2, [pc, #164]	; (8002fbc <TIM_Base_SetConfig+0x124>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d017      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <TIM_Base_SetConfig+0x128>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <TIM_Base_SetConfig+0x12c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <TIM_Base_SetConfig+0x130>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_Base_SetConfig+0x134>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <TIM_Base_SetConfig+0x138>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <TIM_Base_SetConfig+0x13c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <TIM_Base_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0xf8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <TIM_Base_SetConfig+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d103      	bne.n	8002f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40010400 	.word	0x40010400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800
 8002fcc:	40001800 	.word	0x40001800
 8002fd0:	40001c00 	.word	0x40001c00
 8002fd4:	40002000 	.word	0x40002000

08002fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0302 	bic.w	r3, r3, #2
 8003020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <TIM_OC1_SetConfig+0xd8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC1_SetConfig+0x64>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <TIM_OC1_SetConfig+0xdc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10c      	bne.n	8003056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0308 	bic.w	r3, r3, #8
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <TIM_OC1_SetConfig+0xd8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_OC1_SetConfig+0x8e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <TIM_OC1_SetConfig+0xdc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40010400 	.word	0x40010400

080030b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0210 	bic.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0320 	bic.w	r3, r3, #32
 8003102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <TIM_OC2_SetConfig+0xe4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_OC2_SetConfig+0x68>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <TIM_OC2_SetConfig+0xe8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10d      	bne.n	800313c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <TIM_OC2_SetConfig+0xe4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_OC2_SetConfig+0x94>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <TIM_OC2_SetConfig+0xe8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d113      	bne.n	8003174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40010400 	.word	0x40010400

080031a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a21      	ldr	r2, [pc, #132]	; (8003284 <TIM_OC3_SetConfig+0xe0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_OC3_SetConfig+0x66>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <TIM_OC3_SetConfig+0xe4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10d      	bne.n	8003226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a16      	ldr	r2, [pc, #88]	; (8003284 <TIM_OC3_SetConfig+0xe0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_OC3_SetConfig+0x92>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <TIM_OC3_SetConfig+0xe4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d113      	bne.n	800325e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800323c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	621a      	str	r2, [r3, #32]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40010000 	.word	0x40010000
 8003288:	40010400 	.word	0x40010400

0800328c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	031b      	lsls	r3, r3, #12
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <TIM_OC4_SetConfig+0xa4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC4_SetConfig+0x68>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <TIM_OC4_SetConfig+0xa8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40010400 	.word	0x40010400

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0210 	bic.w	r2, r3, #16
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 0307 	orr.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2201      	movs	r2, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1a      	ldr	r2, [r3, #32]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e05a      	b.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a21      	ldr	r2, [pc, #132]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d01d      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a15      	ldr	r2, [pc, #84]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10c      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e03d      	b.n	8003648 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e03f      	b.n	800370e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fc6c 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f829 	bl	8003718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	b09f      	sub	sp, #124	; 0x7c
 800371e:	af00      	add	r7, sp, #0
 8003720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	68d9      	ldr	r1, [r3, #12]
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	ea40 0301 	orr.w	r3, r0, r1
 8003738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	431a      	orrs	r2, r3
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4313      	orrs	r3, r2
 8003750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800375c:	f021 010c 	bic.w	r1, r1, #12
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003766:	430b      	orrs	r3, r1
 8003768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800376a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	6999      	ldr	r1, [r3, #24]
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	ea40 0301 	orr.w	r3, r0, r1
 8003780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4bc5      	ldr	r3, [pc, #788]	; (8003a9c <UART_SetConfig+0x384>)
 8003788:	429a      	cmp	r2, r3
 800378a:	d004      	beq.n	8003796 <UART_SetConfig+0x7e>
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4bc3      	ldr	r3, [pc, #780]	; (8003aa0 <UART_SetConfig+0x388>)
 8003792:	429a      	cmp	r2, r3
 8003794:	d103      	bne.n	800379e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003796:	f7fe fc93 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 800379a:	6778      	str	r0, [r7, #116]	; 0x74
 800379c:	e002      	b.n	80037a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800379e:	f7fe fc7b 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80037a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	f040 80b6 	bne.w	800391c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b2:	461c      	mov	r4, r3
 80037b4:	f04f 0500 	mov.w	r5, #0
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	6439      	str	r1, [r7, #64]	; 0x40
 80037c0:	415b      	adcs	r3, r3
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
 80037c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037c8:	1912      	adds	r2, r2, r4
 80037ca:	eb45 0303 	adc.w	r3, r5, r3
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	00d9      	lsls	r1, r3, #3
 80037d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037dc:	00d0      	lsls	r0, r2, #3
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	1911      	adds	r1, r2, r4
 80037e4:	6639      	str	r1, [r7, #96]	; 0x60
 80037e6:	416b      	adcs	r3, r5
 80037e8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037f8:	415b      	adcs	r3, r3
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003804:	f7fc fcf2 	bl	80001ec <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4ba5      	ldr	r3, [pc, #660]	; (8003aa4 <UART_SetConfig+0x38c>)
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	011e      	lsls	r6, r3, #4
 8003816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003818:	461c      	mov	r4, r3
 800381a:	f04f 0500 	mov.w	r5, #0
 800381e:	4622      	mov	r2, r4
 8003820:	462b      	mov	r3, r5
 8003822:	1891      	adds	r1, r2, r2
 8003824:	6339      	str	r1, [r7, #48]	; 0x30
 8003826:	415b      	adcs	r3, r3
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
 800382a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800382e:	1912      	adds	r2, r2, r4
 8003830:	eb45 0303 	adc.w	r3, r5, r3
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	00d9      	lsls	r1, r3, #3
 800383e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003842:	00d0      	lsls	r0, r2, #3
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	1911      	adds	r1, r2, r4
 800384a:	65b9      	str	r1, [r7, #88]	; 0x58
 800384c:	416b      	adcs	r3, r5
 800384e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	461a      	mov	r2, r3
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	1891      	adds	r1, r2, r2
 800385c:	62b9      	str	r1, [r7, #40]	; 0x28
 800385e:	415b      	adcs	r3, r3
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800386a:	f7fc fcbf 	bl	80001ec <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	; 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	3332      	adds	r3, #50	; 0x32
 8003886:	4a87      	ldr	r2, [pc, #540]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003894:	441e      	add	r6, r3
 8003896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003898:	4618      	mov	r0, r3
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	1894      	adds	r4, r2, r2
 80038a4:	623c      	str	r4, [r7, #32]
 80038a6:	415b      	adcs	r3, r3
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ae:	1812      	adds	r2, r2, r0
 80038b0:	eb41 0303 	adc.w	r3, r1, r3
 80038b4:	f04f 0400 	mov.w	r4, #0
 80038b8:	f04f 0500 	mov.w	r5, #0
 80038bc:	00dd      	lsls	r5, r3, #3
 80038be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038c2:	00d4      	lsls	r4, r2, #3
 80038c4:	4622      	mov	r2, r4
 80038c6:	462b      	mov	r3, r5
 80038c8:	1814      	adds	r4, r2, r0
 80038ca:	653c      	str	r4, [r7, #80]	; 0x50
 80038cc:	414b      	adcs	r3, r1
 80038ce:	657b      	str	r3, [r7, #84]	; 0x54
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	1891      	adds	r1, r2, r2
 80038dc:	61b9      	str	r1, [r7, #24]
 80038de:	415b      	adcs	r3, r3
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ea:	f7fc fc7f 	bl	80001ec <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <UART_SetConfig+0x38c>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 0207 	and.w	r2, r3, #7
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4432      	add	r2, r6
 8003918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800391a:	e0b9      	b.n	8003a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800391c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391e:	461c      	mov	r4, r3
 8003920:	f04f 0500 	mov.w	r5, #0
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	1891      	adds	r1, r2, r2
 800392a:	6139      	str	r1, [r7, #16]
 800392c:	415b      	adcs	r3, r3
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003934:	1912      	adds	r2, r2, r4
 8003936:	eb45 0303 	adc.w	r3, r5, r3
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	00d9      	lsls	r1, r3, #3
 8003944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003948:	00d0      	lsls	r0, r2, #3
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	eb12 0804 	adds.w	r8, r2, r4
 8003952:	eb43 0905 	adc.w	r9, r3, r5
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	008b      	lsls	r3, r1, #2
 800396a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800396e:	0082      	lsls	r2, r0, #2
 8003970:	4640      	mov	r0, r8
 8003972:	4649      	mov	r1, r9
 8003974:	f7fc fc3a 	bl	80001ec <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <UART_SetConfig+0x38c>)
 800397e:	fba3 2302 	umull	r2, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	011e      	lsls	r6, r3, #4
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	4618      	mov	r0, r3
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	1894      	adds	r4, r2, r2
 8003994:	60bc      	str	r4, [r7, #8]
 8003996:	415b      	adcs	r3, r3
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800399e:	1812      	adds	r2, r2, r0
 80039a0:	eb41 0303 	adc.w	r3, r1, r3
 80039a4:	f04f 0400 	mov.w	r4, #0
 80039a8:	f04f 0500 	mov.w	r5, #0
 80039ac:	00dd      	lsls	r5, r3, #3
 80039ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039b2:	00d4      	lsls	r4, r2, #3
 80039b4:	4622      	mov	r2, r4
 80039b6:	462b      	mov	r3, r5
 80039b8:	1814      	adds	r4, r2, r0
 80039ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80039bc:	414b      	adcs	r3, r1
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	008b      	lsls	r3, r1, #2
 80039d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039d8:	0082      	lsls	r2, r0, #2
 80039da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039de:	f7fc fc05 	bl	80001ec <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <UART_SetConfig+0x38c>)
 80039e8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2164      	movs	r1, #100	; 0x64
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	; 0x32
 80039fa:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <UART_SetConfig+0x38c>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a06:	441e      	add	r6, r3
 8003a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	1894      	adds	r4, r2, r2
 8003a16:	603c      	str	r4, [r7, #0]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a20:	1812      	adds	r2, r2, r0
 8003a22:	eb41 0303 	adc.w	r3, r1, r3
 8003a26:	f04f 0400 	mov.w	r4, #0
 8003a2a:	f04f 0500 	mov.w	r5, #0
 8003a2e:	00dd      	lsls	r5, r3, #3
 8003a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a34:	00d4      	lsls	r4, r2, #3
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	008b      	lsls	r3, r1, #2
 8003a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a5a:	0082      	lsls	r2, r0, #2
 8003a5c:	4650      	mov	r0, sl
 8003a5e:	4659      	mov	r1, fp
 8003a60:	f7fc fbc4 	bl	80001ec <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2164      	movs	r1, #100	; 0x64
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	3332      	adds	r3, #50	; 0x32
 8003a7c:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4432      	add	r2, r6
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	377c      	adds	r7, #124	; 0x7c
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	51eb851f 	.word	0x51eb851f

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4d0d      	ldr	r5, [pc, #52]	; (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4d0b      	ldr	r5, [pc, #44]	; (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	; (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 f820 	bl	8003b00 <_init>
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08003b38 	.word	0x08003b38
 8003ae4:	08003b38 	.word	0x08003b38
 8003ae8:	08003b38 	.word	0x08003b38
 8003aec:	08003b3c 	.word	0x08003b3c

08003af0 <memset>:
 8003af0:	4402      	add	r2, r0
 8003af2:	4603      	mov	r3, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
